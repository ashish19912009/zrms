package grpc

import (
	"context"
	"net"

	"github.com/ashish19912009/zrms/services/authz/internal/app/authz"
	"google.golang.org/grpc"
)

type Server struct {
	authzv1.UnimplementedAuthzServiceServer
	authzService *authz.Service
}

func NewServer(authzService *authz.Service) *Server {
	return &Server{authzService: authzService}
}

func (s *Server) CheckPermission(ctx context.Context, req *authzv1.CheckPermissionRequest) (*authzv1.CheckPermissionResponse, error) {
	allowed, err := s.authzService.CheckPermission(ctx, req.Subject, req.Action, req.Resource)
	if err != nil {
		return nil, err
	}
	return &authzv1.CheckPermissionResponse{Allowed: allowed}, nil
}

func (s *Server) AddPolicy(ctx context.Context, req *authzv1.AddPolicyRequest) (*authzv1.AddPolicyResponse, error) {
	policy := &domain.Policy{
		Subject:  req.Subject,
		Action:   req.Action,
		Resource: req.Resource,
	}
	err := s.authzService.AddPolicy(ctx, policy)
	if err != nil {
		return &authzv1.AddPolicyResponse{Success: false}, err
	}
	return &authzv1.AddPolicyResponse{Success: true}, nil
}

func StartGRPCServer(addr string, authzService *authz.Service) error {
	lis, err := net.Listen("tcp", addr)
	if err != nil {
		return err
	}

	grpcServer := grpc.NewServer()
	authzv1.RegisterAuthzServiceServer(grpcServer, NewServer(authzService))
	return grpcServer.Serve(lis)
}
