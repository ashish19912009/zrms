// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockRepo

import (
	time "time"

	models "github.com/ashish19912009/zrms/services/authN/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// TokenManager is an autogenerated mock type for the TokenManager type
type TokenManager struct {
	mock.Mock
}

// GenerateAccessToken provides a mock function with given fields: accountID, employeeID, mobileNo, accountType, name, permissions, duration
func (_m *TokenManager) GenerateAccessToken(accountID string, employeeID string, mobileNo string, accountType string, name string, permissions []string, duration time.Duration) (string, error) {
	ret := _m.Called(accountID, employeeID, mobileNo, accountType, name, permissions, duration)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, []string, time.Duration) (string, error)); ok {
		return rf(accountID, employeeID, mobileNo, accountType, name, permissions, duration)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, []string, time.Duration) string); ok {
		r0 = rf(accountID, employeeID, mobileNo, accountType, name, permissions, duration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, []string, time.Duration) error); ok {
		r1 = rf(accountID, employeeID, mobileNo, accountType, name, permissions, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRefreshToken provides a mock function with given fields: accountID, accountType, permissions, duration
func (_m *TokenManager) GenerateRefreshToken(accountID string, accountType string, permissions []string, duration time.Duration) (string, error) {
	ret := _m.Called(accountID, accountType, permissions, duration)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string, time.Duration) (string, error)); ok {
		return rf(accountID, accountType, permissions, duration)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string, time.Duration) string); ok {
		r0 = rf(accountID, accountType, permissions, duration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []string, time.Duration) error); ok {
		r1 = rf(accountID, accountType, permissions, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: tokenString
func (_m *TokenManager) VerifyToken(tokenString string) (*models.AuthClaims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *models.AuthClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.AuthClaims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *models.AuthClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AuthClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenManager creates a new instance of TokenManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenManager {
	mock := &TokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
