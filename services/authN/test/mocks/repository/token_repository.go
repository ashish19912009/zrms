// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockRepo

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TokenRepository is an autogenerated mock type for the TokenRepository type
type TokenRepository struct {
	mock.Mock
}

// CheckToken provides a mock function with given fields: ctx, keyName, accountID, token
func (_m *TokenRepository) CheckToken(ctx context.Context, keyName string, accountID string, token string) (bool, error) {
	ret := _m.Called(ctx, keyName, accountID, token)

	if len(ret) == 0 {
		panic("no return value specified for CheckToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, keyName, accountID, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, keyName, accountID, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, keyName, accountID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteToken provides a mock function with given fields: ctx, keyName, accountID
func (_m *TokenRepository) DeleteToken(ctx context.Context, keyName string, accountID string) error {
	ret := _m.Called(ctx, keyName, accountID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, keyName, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreToken provides a mock function with given fields: ctx, keyName, accountID, token, expire
func (_m *TokenRepository) StoreToken(ctx context.Context, keyName string, accountID string, token string, expire time.Duration) error {
	ret := _m.Called(ctx, keyName, accountID, token, expire)

	if len(ret) == 0 {
		panic("no return value specified for StoreToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration) error); ok {
		r0 = rf(ctx, keyName, accountID, token, expire)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTokenRepository creates a new instance of TokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenRepository {
	mock := &TokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
