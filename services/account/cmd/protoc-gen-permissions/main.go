package main

import (
	pb "github.com/ashish19912009/zrms/services/account/pb"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
)

func main() {
	protogen.Options{}.Run(func(plugin *protogen.Plugin) error {
		for _, f := range plugin.Files {
			if !f.Generate {
				continue
			}

			g := plugin.NewGeneratedFile(f.GeneratedFilenamePrefix+"_permissions.pb.go", f.GoImportPath)

			g.P("// Code generated by protoc-gen-permissions. DO NOT EDIT.")
			g.P("package ", f.GoPackageName)
			g.P()
			g.P(`import "github.com/ashish19912009/zrms/services/account/pkg/permissions"`)
			g.P()

			// Begin init function
			g.P("\nfunc init() {")
			for _, svc := range f.Services {
				for _, method := range svc.Methods {
					var resource, action string

					opts := method.Desc.Options().(*descriptorpb.MethodOptions)
					if ext, ok := proto.GetExtension(opts, pb.E_Resource).(string); ok {
						resource = ext
					}
					if ext, ok := proto.GetExtension(opts, pb.E_Action).(string); ok {
						action = ext
					}

					fullMethod := "/" + string(svc.Desc.FullName()) + "/" + string(method.Desc.Name())
					g.P(`permissions.Register("`, fullMethod, `", "`, resource, `", "`, action, `")`)
				}
			}
			g.P("}")
		}
		return nil
	})
}
