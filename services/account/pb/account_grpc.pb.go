// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: account.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountService_CreateFranchise_FullMethodName             = "/account.AccountService/CreateFranchise"
	AccountService_UpdateFranchise_FullMethodName             = "/account.AccountService/UpdateFranchise"
	AccountService_UpdateFranchiseStatus_FullMethodName       = "/account.AccountService/UpdateFranchiseStatus"
	AccountService_DeleteFranchise_FullMethodName             = "/account.AccountService/DeleteFranchise"
	AccountService_GetAllFranchises_FullMethodName            = "/account.AccountService/GetAllFranchises"
	AccountService_GetFranchiseByID_FullMethodName            = "/account.AccountService/GetFranchiseByID"
	AccountService_CreateFranchiseDocument_FullMethodName     = "/account.AccountService/CreateFranchiseDocument"
	AccountService_GetFranchiseDocumentByID_FullMethodName    = "/account.AccountService/GetFranchiseDocumentByID"
	AccountService_UpdateFranchiseDocumentByID_FullMethodName = "/account.AccountService/UpdateFranchiseDocumentByID"
	AccountService_DeleteFranchiseDocumentByID_FullMethodName = "/account.AccountService/DeleteFranchiseDocumentByID"
	AccountService_CreateFranchiseAddress_FullMethodName      = "/account.AccountService/CreateFranchiseAddress"
	AccountService_GetFranchiseAddressByID_FullMethodName     = "/account.AccountService/GetFranchiseAddressByID"
	AccountService_UpdateFranchiseAddressByID_FullMethodName  = "/account.AccountService/UpdateFranchiseAddressByID"
	AccountService_CreateFranchiseOwner_FullMethodName        = "/account.AccountService/CreateFranchiseOwner"
	AccountService_UpdateFranchiseOwnerByID_FullMethodName    = "/account.AccountService/UpdateFranchiseOwnerByID"
	AccountService_GetFranchiseOwnerByID_FullMethodName       = "/account.AccountService/GetFranchiseOwnerByID"
	AccountService_CreateFranchiseAccount_FullMethodName      = "/account.AccountService/CreateFranchiseAccount"
	AccountService_GetFranchiseAccountByID_FullMethodName     = "/account.AccountService/GetFranchiseAccountByID"
	AccountService_GetFranchiseAccounts_FullMethodName        = "/account.AccountService/GetFranchiseAccounts"
	AccountService_UpdateFranchiseAccountByID_FullMethodName  = "/account.AccountService/UpdateFranchiseAccountByID"
	AccountService_DeleteFranchiseAccountByID_FullMethodName  = "/account.AccountService/DeleteFranchiseAccountByID"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	CreateFranchise(ctx context.Context, in *AddFranchiseRequest, opts ...grpc.CallOption) (*AddResponse, error)
	UpdateFranchise(ctx context.Context, in *UpdateFranchiseRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdateFranchiseStatus(ctx context.Context, in *UpdateFranchiseStatusRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	DeleteFranchise(ctx context.Context, in *DeleteFranchiseRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	GetAllFranchises(ctx context.Context, in *GetFranchisesRequest, opts ...grpc.CallOption) (*GetFranchisesResponse, error)
	GetFranchiseByID(ctx context.Context, in *GetFranchiseByIDRequest, opts ...grpc.CallOption) (*GetFranchiseByIDResponse, error)
	CreateFranchiseDocument(ctx context.Context, in *AddFranchiseDocumentRequest, opts ...grpc.CallOption) (*AddResponse, error)
	GetFranchiseDocumentByID(ctx context.Context, in *GetFranchiseDocumentRequest, opts ...grpc.CallOption) (*GetFranchiseDocumentResponse, error)
	UpdateFranchiseDocumentByID(ctx context.Context, in *UpdateFranchiseDocumentRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	DeleteFranchiseDocumentByID(ctx context.Context, in *DeleteFranchiseDocumentRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	CreateFranchiseAddress(ctx context.Context, in *AddFranchiseAddressRequest, opts ...grpc.CallOption) (*AddResponse, error)
	GetFranchiseAddressByID(ctx context.Context, in *GetFranchiseAddressRequest, opts ...grpc.CallOption) (*GetFranchiseAddressResponse, error)
	UpdateFranchiseAddressByID(ctx context.Context, in *UpdateFranchiseAddressRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	CreateFranchiseOwner(ctx context.Context, in *AddFranchiseOwnerRequest, opts ...grpc.CallOption) (*AddResponse, error)
	UpdateFranchiseOwnerByID(ctx context.Context, in *UpdateFranchiseOwnerRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	GetFranchiseOwnerByID(ctx context.Context, in *GetFranchiseOwnerRequest, opts ...grpc.CallOption) (*GetFranchiseOwnerResponse, error)
	CreateFranchiseAccount(ctx context.Context, in *AddFranchiseAccountRequest, opts ...grpc.CallOption) (*AddResponse, error)
	GetFranchiseAccountByID(ctx context.Context, in *GetFranchiseAccountByIDRequest, opts ...grpc.CallOption) (*GetFranchiseAccountByIDResponse, error)
	GetFranchiseAccounts(ctx context.Context, in *GetFranchiseAccountsRequest, opts ...grpc.CallOption) (*GetFranchiseAccountsResponse, error)
	UpdateFranchiseAccountByID(ctx context.Context, in *UpdateFranchiseAccountRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	DeleteFranchiseAccountByID(ctx context.Context, in *DeleteFranchiseAccountRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) CreateFranchise(ctx context.Context, in *AddFranchiseRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, AccountService_CreateFranchise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateFranchise(ctx context.Context, in *UpdateFranchiseRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, AccountService_UpdateFranchise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateFranchiseStatus(ctx context.Context, in *UpdateFranchiseStatusRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, AccountService_UpdateFranchiseStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteFranchise(ctx context.Context, in *DeleteFranchiseRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, AccountService_DeleteFranchise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAllFranchises(ctx context.Context, in *GetFranchisesRequest, opts ...grpc.CallOption) (*GetFranchisesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFranchisesResponse)
	err := c.cc.Invoke(ctx, AccountService_GetAllFranchises_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetFranchiseByID(ctx context.Context, in *GetFranchiseByIDRequest, opts ...grpc.CallOption) (*GetFranchiseByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFranchiseByIDResponse)
	err := c.cc.Invoke(ctx, AccountService_GetFranchiseByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateFranchiseDocument(ctx context.Context, in *AddFranchiseDocumentRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, AccountService_CreateFranchiseDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetFranchiseDocumentByID(ctx context.Context, in *GetFranchiseDocumentRequest, opts ...grpc.CallOption) (*GetFranchiseDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFranchiseDocumentResponse)
	err := c.cc.Invoke(ctx, AccountService_GetFranchiseDocumentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateFranchiseDocumentByID(ctx context.Context, in *UpdateFranchiseDocumentRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, AccountService_UpdateFranchiseDocumentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteFranchiseDocumentByID(ctx context.Context, in *DeleteFranchiseDocumentRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, AccountService_DeleteFranchiseDocumentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateFranchiseAddress(ctx context.Context, in *AddFranchiseAddressRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, AccountService_CreateFranchiseAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetFranchiseAddressByID(ctx context.Context, in *GetFranchiseAddressRequest, opts ...grpc.CallOption) (*GetFranchiseAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFranchiseAddressResponse)
	err := c.cc.Invoke(ctx, AccountService_GetFranchiseAddressByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateFranchiseAddressByID(ctx context.Context, in *UpdateFranchiseAddressRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, AccountService_UpdateFranchiseAddressByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateFranchiseOwner(ctx context.Context, in *AddFranchiseOwnerRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, AccountService_CreateFranchiseOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateFranchiseOwnerByID(ctx context.Context, in *UpdateFranchiseOwnerRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, AccountService_UpdateFranchiseOwnerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetFranchiseOwnerByID(ctx context.Context, in *GetFranchiseOwnerRequest, opts ...grpc.CallOption) (*GetFranchiseOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFranchiseOwnerResponse)
	err := c.cc.Invoke(ctx, AccountService_GetFranchiseOwnerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateFranchiseAccount(ctx context.Context, in *AddFranchiseAccountRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, AccountService_CreateFranchiseAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetFranchiseAccountByID(ctx context.Context, in *GetFranchiseAccountByIDRequest, opts ...grpc.CallOption) (*GetFranchiseAccountByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFranchiseAccountByIDResponse)
	err := c.cc.Invoke(ctx, AccountService_GetFranchiseAccountByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetFranchiseAccounts(ctx context.Context, in *GetFranchiseAccountsRequest, opts ...grpc.CallOption) (*GetFranchiseAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFranchiseAccountsResponse)
	err := c.cc.Invoke(ctx, AccountService_GetFranchiseAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateFranchiseAccountByID(ctx context.Context, in *UpdateFranchiseAccountRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, AccountService_UpdateFranchiseAccountByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteFranchiseAccountByID(ctx context.Context, in *DeleteFranchiseAccountRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, AccountService_DeleteFranchiseAccountByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility.
type AccountServiceServer interface {
	CreateFranchise(context.Context, *AddFranchiseRequest) (*AddResponse, error)
	UpdateFranchise(context.Context, *UpdateFranchiseRequest) (*UpdateResponse, error)
	UpdateFranchiseStatus(context.Context, *UpdateFranchiseStatusRequest) (*UpdateResponse, error)
	DeleteFranchise(context.Context, *DeleteFranchiseRequest) (*DeletedResponse, error)
	GetAllFranchises(context.Context, *GetFranchisesRequest) (*GetFranchisesResponse, error)
	GetFranchiseByID(context.Context, *GetFranchiseByIDRequest) (*GetFranchiseByIDResponse, error)
	CreateFranchiseDocument(context.Context, *AddFranchiseDocumentRequest) (*AddResponse, error)
	GetFranchiseDocumentByID(context.Context, *GetFranchiseDocumentRequest) (*GetFranchiseDocumentResponse, error)
	UpdateFranchiseDocumentByID(context.Context, *UpdateFranchiseDocumentRequest) (*UpdateResponse, error)
	DeleteFranchiseDocumentByID(context.Context, *DeleteFranchiseDocumentRequest) (*DeletedResponse, error)
	CreateFranchiseAddress(context.Context, *AddFranchiseAddressRequest) (*AddResponse, error)
	GetFranchiseAddressByID(context.Context, *GetFranchiseAddressRequest) (*GetFranchiseAddressResponse, error)
	UpdateFranchiseAddressByID(context.Context, *UpdateFranchiseAddressRequest) (*UpdateResponse, error)
	CreateFranchiseOwner(context.Context, *AddFranchiseOwnerRequest) (*AddResponse, error)
	UpdateFranchiseOwnerByID(context.Context, *UpdateFranchiseOwnerRequest) (*UpdateResponse, error)
	GetFranchiseOwnerByID(context.Context, *GetFranchiseOwnerRequest) (*GetFranchiseOwnerResponse, error)
	CreateFranchiseAccount(context.Context, *AddFranchiseAccountRequest) (*AddResponse, error)
	GetFranchiseAccountByID(context.Context, *GetFranchiseAccountByIDRequest) (*GetFranchiseAccountByIDResponse, error)
	GetFranchiseAccounts(context.Context, *GetFranchiseAccountsRequest) (*GetFranchiseAccountsResponse, error)
	UpdateFranchiseAccountByID(context.Context, *UpdateFranchiseAccountRequest) (*UpdateResponse, error)
	DeleteFranchiseAccountByID(context.Context, *DeleteFranchiseAccountRequest) (*DeletedResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountServiceServer struct{}

func (UnimplementedAccountServiceServer) CreateFranchise(context.Context, *AddFranchiseRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFranchise not implemented")
}
func (UnimplementedAccountServiceServer) UpdateFranchise(context.Context, *UpdateFranchiseRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFranchise not implemented")
}
func (UnimplementedAccountServiceServer) UpdateFranchiseStatus(context.Context, *UpdateFranchiseStatusRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFranchiseStatus not implemented")
}
func (UnimplementedAccountServiceServer) DeleteFranchise(context.Context, *DeleteFranchiseRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFranchise not implemented")
}
func (UnimplementedAccountServiceServer) GetAllFranchises(context.Context, *GetFranchisesRequest) (*GetFranchisesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFranchises not implemented")
}
func (UnimplementedAccountServiceServer) GetFranchiseByID(context.Context, *GetFranchiseByIDRequest) (*GetFranchiseByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFranchiseByID not implemented")
}
func (UnimplementedAccountServiceServer) CreateFranchiseDocument(context.Context, *AddFranchiseDocumentRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFranchiseDocument not implemented")
}
func (UnimplementedAccountServiceServer) GetFranchiseDocumentByID(context.Context, *GetFranchiseDocumentRequest) (*GetFranchiseDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFranchiseDocumentByID not implemented")
}
func (UnimplementedAccountServiceServer) UpdateFranchiseDocumentByID(context.Context, *UpdateFranchiseDocumentRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFranchiseDocumentByID not implemented")
}
func (UnimplementedAccountServiceServer) DeleteFranchiseDocumentByID(context.Context, *DeleteFranchiseDocumentRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFranchiseDocumentByID not implemented")
}
func (UnimplementedAccountServiceServer) CreateFranchiseAddress(context.Context, *AddFranchiseAddressRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFranchiseAddress not implemented")
}
func (UnimplementedAccountServiceServer) GetFranchiseAddressByID(context.Context, *GetFranchiseAddressRequest) (*GetFranchiseAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFranchiseAddressByID not implemented")
}
func (UnimplementedAccountServiceServer) UpdateFranchiseAddressByID(context.Context, *UpdateFranchiseAddressRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFranchiseAddressByID not implemented")
}
func (UnimplementedAccountServiceServer) CreateFranchiseOwner(context.Context, *AddFranchiseOwnerRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFranchiseOwner not implemented")
}
func (UnimplementedAccountServiceServer) UpdateFranchiseOwnerByID(context.Context, *UpdateFranchiseOwnerRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFranchiseOwnerByID not implemented")
}
func (UnimplementedAccountServiceServer) GetFranchiseOwnerByID(context.Context, *GetFranchiseOwnerRequest) (*GetFranchiseOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFranchiseOwnerByID not implemented")
}
func (UnimplementedAccountServiceServer) CreateFranchiseAccount(context.Context, *AddFranchiseAccountRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFranchiseAccount not implemented")
}
func (UnimplementedAccountServiceServer) GetFranchiseAccountByID(context.Context, *GetFranchiseAccountByIDRequest) (*GetFranchiseAccountByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFranchiseAccountByID not implemented")
}
func (UnimplementedAccountServiceServer) GetFranchiseAccounts(context.Context, *GetFranchiseAccountsRequest) (*GetFranchiseAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFranchiseAccounts not implemented")
}
func (UnimplementedAccountServiceServer) UpdateFranchiseAccountByID(context.Context, *UpdateFranchiseAccountRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFranchiseAccountByID not implemented")
}
func (UnimplementedAccountServiceServer) DeleteFranchiseAccountByID(context.Context, *DeleteFranchiseAccountRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFranchiseAccountByID not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}
func (UnimplementedAccountServiceServer) testEmbeddedByValue()                        {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_CreateFranchise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFranchiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateFranchise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CreateFranchise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateFranchise(ctx, req.(*AddFranchiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateFranchise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFranchiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateFranchise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateFranchise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateFranchise(ctx, req.(*UpdateFranchiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateFranchiseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFranchiseStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateFranchiseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateFranchiseStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateFranchiseStatus(ctx, req.(*UpdateFranchiseStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteFranchise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFranchiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteFranchise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_DeleteFranchise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteFranchise(ctx, req.(*DeleteFranchiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAllFranchises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFranchisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAllFranchises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAllFranchises_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAllFranchises(ctx, req.(*GetFranchisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetFranchiseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFranchiseByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetFranchiseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetFranchiseByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetFranchiseByID(ctx, req.(*GetFranchiseByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateFranchiseDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFranchiseDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateFranchiseDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CreateFranchiseDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateFranchiseDocument(ctx, req.(*AddFranchiseDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetFranchiseDocumentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFranchiseDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetFranchiseDocumentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetFranchiseDocumentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetFranchiseDocumentByID(ctx, req.(*GetFranchiseDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateFranchiseDocumentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFranchiseDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateFranchiseDocumentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateFranchiseDocumentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateFranchiseDocumentByID(ctx, req.(*UpdateFranchiseDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteFranchiseDocumentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFranchiseDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteFranchiseDocumentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_DeleteFranchiseDocumentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteFranchiseDocumentByID(ctx, req.(*DeleteFranchiseDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateFranchiseAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFranchiseAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateFranchiseAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CreateFranchiseAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateFranchiseAddress(ctx, req.(*AddFranchiseAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetFranchiseAddressByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFranchiseAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetFranchiseAddressByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetFranchiseAddressByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetFranchiseAddressByID(ctx, req.(*GetFranchiseAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateFranchiseAddressByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFranchiseAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateFranchiseAddressByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateFranchiseAddressByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateFranchiseAddressByID(ctx, req.(*UpdateFranchiseAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateFranchiseOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFranchiseOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateFranchiseOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CreateFranchiseOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateFranchiseOwner(ctx, req.(*AddFranchiseOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateFranchiseOwnerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFranchiseOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateFranchiseOwnerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateFranchiseOwnerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateFranchiseOwnerByID(ctx, req.(*UpdateFranchiseOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetFranchiseOwnerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFranchiseOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetFranchiseOwnerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetFranchiseOwnerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetFranchiseOwnerByID(ctx, req.(*GetFranchiseOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateFranchiseAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFranchiseAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateFranchiseAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CreateFranchiseAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateFranchiseAccount(ctx, req.(*AddFranchiseAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetFranchiseAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFranchiseAccountByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetFranchiseAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetFranchiseAccountByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetFranchiseAccountByID(ctx, req.(*GetFranchiseAccountByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetFranchiseAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFranchiseAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetFranchiseAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetFranchiseAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetFranchiseAccounts(ctx, req.(*GetFranchiseAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateFranchiseAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFranchiseAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateFranchiseAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateFranchiseAccountByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateFranchiseAccountByID(ctx, req.(*UpdateFranchiseAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteFranchiseAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFranchiseAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteFranchiseAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_DeleteFranchiseAccountByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteFranchiseAccountByID(ctx, req.(*DeleteFranchiseAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFranchise",
			Handler:    _AccountService_CreateFranchise_Handler,
		},
		{
			MethodName: "UpdateFranchise",
			Handler:    _AccountService_UpdateFranchise_Handler,
		},
		{
			MethodName: "UpdateFranchiseStatus",
			Handler:    _AccountService_UpdateFranchiseStatus_Handler,
		},
		{
			MethodName: "DeleteFranchise",
			Handler:    _AccountService_DeleteFranchise_Handler,
		},
		{
			MethodName: "GetAllFranchises",
			Handler:    _AccountService_GetAllFranchises_Handler,
		},
		{
			MethodName: "GetFranchiseByID",
			Handler:    _AccountService_GetFranchiseByID_Handler,
		},
		{
			MethodName: "CreateFranchiseDocument",
			Handler:    _AccountService_CreateFranchiseDocument_Handler,
		},
		{
			MethodName: "GetFranchiseDocumentByID",
			Handler:    _AccountService_GetFranchiseDocumentByID_Handler,
		},
		{
			MethodName: "UpdateFranchiseDocumentByID",
			Handler:    _AccountService_UpdateFranchiseDocumentByID_Handler,
		},
		{
			MethodName: "DeleteFranchiseDocumentByID",
			Handler:    _AccountService_DeleteFranchiseDocumentByID_Handler,
		},
		{
			MethodName: "CreateFranchiseAddress",
			Handler:    _AccountService_CreateFranchiseAddress_Handler,
		},
		{
			MethodName: "GetFranchiseAddressByID",
			Handler:    _AccountService_GetFranchiseAddressByID_Handler,
		},
		{
			MethodName: "UpdateFranchiseAddressByID",
			Handler:    _AccountService_UpdateFranchiseAddressByID_Handler,
		},
		{
			MethodName: "CreateFranchiseOwner",
			Handler:    _AccountService_CreateFranchiseOwner_Handler,
		},
		{
			MethodName: "UpdateFranchiseOwnerByID",
			Handler:    _AccountService_UpdateFranchiseOwnerByID_Handler,
		},
		{
			MethodName: "GetFranchiseOwnerByID",
			Handler:    _AccountService_GetFranchiseOwnerByID_Handler,
		},
		{
			MethodName: "CreateFranchiseAccount",
			Handler:    _AccountService_CreateFranchiseAccount_Handler,
		},
		{
			MethodName: "GetFranchiseAccountByID",
			Handler:    _AccountService_GetFranchiseAccountByID_Handler,
		},
		{
			MethodName: "GetFranchiseAccounts",
			Handler:    _AccountService_GetFranchiseAccounts_Handler,
		},
		{
			MethodName: "UpdateFranchiseAccountByID",
			Handler:    _AccountService_UpdateFranchiseAccountByID_Handler,
		},
		{
			MethodName: "DeleteFranchiseAccountByID",
			Handler:    _AccountService_DeleteFranchiseAccountByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
